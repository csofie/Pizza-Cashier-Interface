
package pizza.cashier.interference;

import SQLinfo.Information;
import information.accountsAndOrders;
import items.Food;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import java.sql.*;
import java.util.Arrays;
import javax.swing.SwingUtilities;

/**
 *
 * @author m_che
 */
public class managerMenuTab extends javax.swing.JFrame {
    
    final ImageIcon icon = new ImageIcon("C:\\Users\\m_che\\Documents\\NetBeansProjects\\Pizza Cashier Interference\\src\\pizza\\cashier\\interference\\images\\Pizza Cashier Interface (HACKATHON).png");
    
    static ResultSet rs;
    static ResultSetMetaData rsmd;
    static int totalItemsCount = 0;
        
    /**
     * Creates new form managerMenuTab
     */
    
    public managerMenuTab() {
        connectDB(Information.getUrlSQL(), Information.getUsernameSQL(), Information.getPasswordSQL());
        listModel = new DefaultListModel<>();
        initComponents();
        
        if(staffMain.getMode() == true) {
            btnAddSpPizza.setVisible(false);
            btnDelete.setVisible(false);
            btnEdit.setVisible(false);
            btnAddItem.setVisible(false);
            btnAddSpPizza.revalidate(); btnDelete.revalidate(); btnEdit.revalidate(); btnAddItem.revalidate();
            btnAddSpPizza.repaint(); btnDelete.repaint(); btnEdit.repaint(); btnAddItem.repaint();
        }
        
        if(ordersTab.getCurrentOrderState() != true) {
            btnAddToOrder.setVisible(false);
            btnReturn2.setVisible(false);
        }
    }
    
    private static void connectDB(String url, String username, String password) {
        try ( Connection conn = DriverManager.getConnection(url, username, password)) {
                Statement stat = conn.createStatement();
                rs = stat.executeQuery("SELECT * FROM products");
                rsmd = rs.getMetaData();

                accountsAndOrders.getSpPizzas().clear(); accountsAndOrders.getShakes().clear(); accountsAndOrders.getIceCream().clear();accountsAndOrders.getCookies().clear();accountsAndOrders.getColdDrinks().clear();accountsAndOrders.getHotDrinks().clear();accountsAndOrders.getSpSalads().clear();accountsAndOrders.getSauces().clear();

                while (rs.next()) {
                        String itemIngred = rs.getString(7);
                        ArrayList<String> ingredients = new ArrayList(Arrays.asList(itemIngred.split("\\s*,\\s*")));
                        Food item = new Food(rs.getString(2), rs.getString(3), rs.getString(4), rs.getDouble(5), rs.getString(6));
                        
                        String type = rs.getString(6);
                    switch (type) {          
                        case "Specialty Pizza" -> accountsAndOrders.getSpPizzas().add(item);
                        case "Shake" -> accountsAndOrders.getShakes().add(item);
                        case "Ice Cream" -> accountsAndOrders.getIceCream().add(item);
                        case "Cookie" -> accountsAndOrders.getCookies().add(item);
                        case "Cold Drink" -> accountsAndOrders.getColdDrinks().add(item);
                        case "Hot Drink" -> accountsAndOrders.getHotDrinks().add(item);
                        case "Specialty Salad" -> accountsAndOrders.getSpSalads().add(item);
                        case "Sauce" -> accountsAndOrders.getSauces().add(item);
                    }
                    
                    totalItemsCount++;
                    item.setIngredients(ingredients);
                    item.setSQLIndex(totalItemsCount);
                    
                }
            } catch (Exception ex) {
                System.out.println(ex);
            }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLayeredPane = new javax.swing.JLayeredPane();
        jPanel = new javax.swing.JPanel();
        MenuTxt = new javax.swing.JTextField();
        btnPizzas = new javax.swing.JButton();
        btnDrinks = new javax.swing.JButton();
        btnSalads = new javax.swing.JButton();
        btnSauces = new javax.swing.JButton();
        btnSeeAllItems = new javax.swing.JButton();
        btnAddItem = new javax.swing.JButton();
        btnDesserts = new javax.swing.JButton();
        btnReturn2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        specialtyPizzasTxt = new javax.swing.JTextField();
        jScrollPane = new javax.swing.JScrollPane();
        listSpecialtyPizzas = new javax.swing.JList<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listIngredients = new JList<>(listModel);
        jScrollPane2 = new javax.swing.JScrollPane();
        descriptionTxtArea = new javax.swing.JTextArea();
        lblDescription = new javax.swing.JLabel();
        lblIngredients = new javax.swing.JLabel();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        priceText = new javax.swing.JTextField();
        imageIcon = new javax.swing.JLabel();
        btnAddToOrder = new javax.swing.JButton();
        selectSortBy = new javax.swing.JComboBox<>();
        btnAddSpPizza = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        newItemTxt = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        nameTxt = new javax.swing.JTextField();
        imageDirectoryTxt = new javax.swing.JTextField();
        imageLabel = new javax.swing.JLabel();
        priceLabel = new javax.swing.JLabel();
        priceTxt = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        descriptionTxt = new javax.swing.JTextArea();
        btnNext = new javax.swing.JButton();
        errorTxt = new javax.swing.JTextField();
        btnReturn1 = new javax.swing.JButton();
        selectFoodItem = new javax.swing.JComboBox<>();
        priceLabel1 = new javax.swing.JLabel();
        Menu = new javax.swing.JMenuBar();
        Home = new javax.swing.JMenu();
        File = new javax.swing.JMenu();
        menuLogOut = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLayeredPane.setLayout(new java.awt.CardLayout());

        jPanel.setBackground(new java.awt.Color(204, 204, 255));

        MenuTxt.setEditable(false);
        MenuTxt.setFont(new java.awt.Font("Segoe UI Black", 0, 36)); // NOI18N
        MenuTxt.setText("MENU");
        MenuTxt.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 0, 0)));
        MenuTxt.setSelectionColor(new java.awt.Color(204, 102, 0));

        btnPizzas.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        btnPizzas.setText("Pizzas");
        btnPizzas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPizzasActionPerformed(evt);
            }
        });

        btnDrinks.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        btnDrinks.setText("Drinks");
        btnDrinks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDrinksActionPerformed(evt);
            }
        });

        btnSalads.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        btnSalads.setText("Salads");
        btnSalads.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaladsActionPerformed(evt);
            }
        });

        btnSauces.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        btnSauces.setText("Sauces");
        btnSauces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaucesActionPerformed(evt);
            }
        });

        btnSeeAllItems.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        btnSeeAllItems.setText("See All Items");
        btnSeeAllItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeeAllItemsActionPerformed(evt);
            }
        });

        btnAddItem.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        btnAddItem.setText("Add Item");
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        btnDesserts.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        btnDesserts.setText("Desserts");
        btnDesserts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDessertsActionPerformed(evt);
            }
        });

        btnReturn2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pizza/cashier/interference/images/returnIcon.png"))); // NOI18N
        btnReturn2.setBorder(null);
        btnReturn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturn2btnEditUsernameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addGap(0, 546, Short.MAX_VALUE)
                        .addComponent(btnAddItem))
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnReturn2)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanelLayout.createSequentialGroup()
                .addGap(198, 198, 198)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(btnSalads)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSauces))
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addComponent(btnPizzas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDesserts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDrinks))
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(btnSeeAllItems))
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(MenuTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(btnReturn2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88)
                .addComponent(MenuTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPizzas)
                    .addComponent(btnDrinks)
                    .addComponent(btnDesserts))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalads)
                    .addComponent(btnSauces))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSeeAllItems)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                .addComponent(btnAddItem)
                .addContainerGap())
        );

        jLayeredPane.add(jPanel, "card2");

        jPanel1.setBackground(new java.awt.Color(204, 204, 255));

        specialtyPizzasTxt.setEditable(false);
        specialtyPizzasTxt.setFont(new java.awt.Font("Segoe UI Black", 0, 36)); // NOI18N
        specialtyPizzasTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        specialtyPizzasTxt.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 0, 0)));
        specialtyPizzasTxt.setSelectionColor(new java.awt.Color(204, 102, 0));
        specialtyPizzasTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                specialtyPizzasTxtActionPerformed(evt);
            }
        });

        listSpecialtyPizzas.setFont(new java.awt.Font("Trebuchet MS", 0, 12)); // NOI18N
        listSpecialtyPizzas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listSpecialtyPizzasMouseClicked(evt);
            }
        });
        jScrollPane.setViewportView(listSpecialtyPizzas);

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jScrollPane1.setViewportView(listIngredients);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        descriptionTxtArea.setEditable(false);
        descriptionTxtArea.setColumns(20);
        descriptionTxtArea.setLineWrap(true);
        descriptionTxtArea.setRows(5);
        descriptionTxtArea.setWrapStyleWord(true);
        jScrollPane2.setViewportView(descriptionTxtArea);

        lblDescription.setText("Description");

        lblIngredients.setText("Ingredients");

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pizza/cashier/interference/images/editIcon.png"))); // NOI18N
        btnEdit.setBorder(null);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel1.setText("Price:");

        priceText.setEditable(false);

        btnAddToOrder.setText("Add to Order");
        btnAddToOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imageIcon, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(priceText))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(btnEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(0, 12, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnAddToOrder, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addContainerGap())
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(lblDescription)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblIngredients)
                        .addGap(47, 47, 47))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDescription)
                    .addComponent(lblIngredients))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(priceText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddToOrder)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDelete)
                            .addComponent(btnEdit)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(imageIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        selectSortBy.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sort by...", "Alphabetical", "Zetabetical" }));
        selectSortBy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectSortByActionPerformed(evt);
            }
        });

        btnAddSpPizza.setText("Add New");
        btnAddSpPizza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSpPizzaActionPerformed(evt);
            }
        });

        btnReturn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pizza/cashier/interference/images/returnIcon.png"))); // NOI18N
        btnReturn.setBorder(null);
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnbtnEditUsernameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnReturn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(specialtyPizzasTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectSortBy, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(btnAddSpPizza)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectSortBy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAddSpPizza)
                        .addGap(0, 98, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(specialtyPizzasTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(btnReturn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane)))
                .addContainerGap())
        );

        jLayeredPane.add(jPanel1, "card3");

        jPanel3.setBackground(new java.awt.Color(204, 204, 255));

        newItemTxt.setEditable(false);
        newItemTxt.setFont(new java.awt.Font("Segoe UI Black", 0, 36)); // NOI18N
        newItemTxt.setText("Create New Item");
        newItemTxt.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(153, 0, 0)));
        newItemTxt.setSelectionColor(new java.awt.Color(204, 102, 0));

        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        nameLabel.setText("<html><u>Name:</u></html>");

        nameTxt.setText("Type here...");

        imageDirectoryTxt.setText("...");

        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        imageLabel.setText("<html><u>Image Directory:</u></html>");

        priceLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        priceLabel.setText("<html><u>Price:</u></html>");

        priceTxt.setText("...");

        descriptionLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        descriptionLabel.setText("<html><u>Description:</u></html>");

        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        descriptionTxt.setColumns(20);
        descriptionTxt.setLineWrap(true);
        descriptionTxt.setRows(5);
        descriptionTxt.setWrapStyleWord(true);
        jScrollPane4.setViewportView(descriptionTxt);

        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        errorTxt.setEditable(false);
        errorTxt.setBackground(new java.awt.Color(214, 217, 223));
        errorTxt.setForeground(new java.awt.Color(153, 0, 0));
        errorTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        errorTxt.setBorder(null);

        btnReturn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pizza/cashier/interference/images/returnIcon.png"))); // NOI18N
        btnReturn1.setBorder(null);
        btnReturn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturn1ActionPerformed(evt);
            }
        });

        selectFoodItem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Item...", "Specialty Pizza", "Hot Drink", "Cold Drink", "Shake", "Cookie", "Ice Cream", "Specialty Salad", "Sauce" }));

        priceLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        priceLabel1.setText("<html><u>Item Type:</u></html>");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnReturn1)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(219, 219, 219)
                        .addComponent(btnNext))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(imageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(priceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(descriptionLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(priceLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(selectFoodItem, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nameTxt)
                            .addComponent(imageDirectoryTxt)
                            .addComponent(jScrollPane4)
                            .addComponent(errorTxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                            .addComponent(priceTxt, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGap(109, 109, 109)
                        .addComponent(newItemTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(173, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(newItemTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReturn1))
                .addGap(27, 27, 27)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imageLabel)
                    .addComponent(imageDirectoryTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(priceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceLabel))
                .addGap(10, 10, 10)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectFoodItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(priceLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descriptionLabel)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(errorTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNext)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jLayeredPane.add(jPanel3, "card4");

        Menu.setPreferredSize(new java.awt.Dimension(123, 35));

        Home.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pizza/cashier/interference/images/Pizza Cashier Interface (HACKATHON).png"))); // NOI18N
        Home.setMaximumSize(new java.awt.Dimension(40, 33));
        Home.setMinimumSize(new java.awt.Dimension(20, 33));
        Home.setPreferredSize(new java.awt.Dimension(40, 33));

        Home.addMouseListener(new MouseListener() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if(staffMain.getMode() == true) {
                    ordersTab.setCurrentOrderState(false);
                    staffMain sMain = new staffMain();
                    sMain.setVisible(true);
                    dispose();
                    staffMain.setMode(false);
                } else {
                    managerMain mMain = new managerMain();
                    mMain.setVisible(true);
                    dispose();
                }
            }
            @Override
            public void mousePressed(MouseEvent e) {}
            @Override
            public void mouseReleased(MouseEvent e) {}
            @Override
            public void mouseEntered(MouseEvent e) {}
            @Override
            public void mouseExited(MouseEvent e) {}
        });

        Menu.add(Home);

        File.setText("File");

        menuLogOut.setText("Log Out");
        menuLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLogOutActionPerformed(evt);
            }
        });
        File.add(menuLogOut);

        Menu.add(File);

        Help.setText("Help");
        Menu.add(Help);

        setJMenuBar(Menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void menuLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLogOutActionPerformed
        staffMain.setMode(false);
        managerLoginPage managerMode = new managerLoginPage();
        managerMode.setVisible(true);
        dispose();
    }//GEN-LAST:event_menuLogOutActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        String[] options = new String[] {"Description", "Ingredients", "Image", "Price", "Cancel"};
        //0, 1, 2, 3
        
        //makes the joption pane w/ 4 categories
        if(listSpecialtyPizzas.getSelectedValue() != null) {
            Food item = null;
            
            switch (specialtyPizzasTxt.getText()) {
                case "All Items" -> item = accountsAndOrders.getAllFoods().get(listSpecialtyPizzas.getSelectedIndex());
                case "Specialty Pizzas" -> item = accountsAndOrders.getSpPizzas().get(listSpecialtyPizzas.getSelectedIndex());
                case "Cold Drinks" -> item = accountsAndOrders.getColdDrinks().get(listSpecialtyPizzas.getSelectedIndex());
                case "Hot Drinks" -> item = accountsAndOrders.getHotDrinks().get(listSpecialtyPizzas.getSelectedIndex());
                case "Shakes" -> item = accountsAndOrders.getShakes().get(listSpecialtyPizzas.getSelectedIndex());
                case "Ice Creams" -> item = accountsAndOrders.getIceCream().get(listSpecialtyPizzas.getSelectedIndex());
                case "Cookies" -> item = accountsAndOrders.getCookies().get(listSpecialtyPizzas.getSelectedIndex());
                case "Specialty Salads" -> item = accountsAndOrders.getSpSalads().get(listSpecialtyPizzas.getSelectedIndex());
                case "Sauces" -> item = accountsAndOrders.getSauces().get(listSpecialtyPizzas.getSelectedIndex());
            }
            
            int sqlIndex = item.getSQLIndex();
            
            int response = JOptionPane.showOptionDialog(null, "Select what you want to edit about this item.", "Edit...", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
            
            if(response == 0) { //description
                item.setDescription(JOptionPane.showInputDialog(null, "Please enter your new desired description.", "new", JOptionPane.INFORMATION_MESSAGE));
                descriptionTxtArea.setText(item.getDescription());
                
                try(Connection conn = DriverManager.getConnection(Information.getUrlSQL(), Information.getUsernameSQL(), Information.getPasswordSQL())) {
                    Statement statement = conn.createStatement();
                    statement.executeUpdate("UPDATE `foods`.`products` SET `description` = '" + item.getDescription() + "' WHERE (`food_id` = '" + sqlIndex + "');");
                } catch(Exception ex) {System.out.println(ex);}
            }
            else if(response == 1) { //ingredients
                UIManager.put("OptionPane.yesButtonText", "Add");
                UIManager.put("OptionPane.noButtonText", "Remove");
                int  input = JOptionPane.showConfirmDialog(null, "Would you like to add or remove an ingredient?", "Select an Option...",JOptionPane.YES_NO_CANCEL_OPTION, -1);
                
                if(input == 0) {
                    String ingredient = JOptionPane.showInputDialog(null, "Please enter the new ingredient", "new", JOptionPane.INFORMATION_MESSAGE);
                    item.addIngredient(ingredient);
                    listModel.addElement(ingredient);
                    
                    try(Connection conn = DriverManager.getConnection(Information.getUrlSQL(), Information.getUsernameSQL(), Information.getPasswordSQL())) {
                        Statement statement = conn.createStatement();
                        statement.executeUpdate("UPDATE `foods`.`products` SET `ingredients` = CONCAT(ingredients, ', " + ingredient + "') WHERE (`food_id` = '" + sqlIndex + "');");
                    } catch(Exception ex) {System.out.println(ex);}
                    
                } else if(input == 1) {
                    while(true) {
                        boolean correct;
                        String removeThisIngredient = JOptionPane.showInputDialog(null, "Please enter the ingredient you want to remove", "remove", JOptionPane.INFORMATION_MESSAGE);
                        
                        if(removeThisIngredient == null) {
                            break;
                        } else correct = item.removeIngredient(removeThisIngredient);

                        if(correct)  {
                            listModel.removeElement(removeThisIngredient);
                            try(Connection conn = DriverManager.getConnection(Information.getUrlSQL(), Information.getUsernameSQL(), Information.getPasswordSQL())) {
                                Statement statement = conn.createStatement();
                                statement.executeUpdate("UPDATE `foods`.`products` SET `ingredients` = REPLACE(ingredients,', " + removeThisIngredient + "','') WHERE (`food_id` = '" + sqlIndex + "');");
                            } catch(Exception ex) {System.out.println(ex);}
                            break;
                        }            
                    }
                }
            }
            
            else if(response == 2) { //image
                item.setImageDirectory(JOptionPane.showInputDialog(null, "Please type the new image's directory (100 x 75).", "new", JOptionPane.INFORMATION_MESSAGE));
                try{
                    imageIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource(item.getImageDirectory())));
                    try(Connection conn = DriverManager.getConnection(Information.getUrlSQL(), Information.getUsernameSQL(), Information.getPasswordSQL())) {
                    Statement statement = conn.createStatement();
                    statement.executeUpdate("UPDATE `foods`.`products` SET `imageDirectory` = '" + item.getImageDirectory() + "' WHERE (`food_id` = '" + sqlIndex + "');");
                    } catch(Exception ex) {System.out.println(ex);}
                } catch(Exception e) {}
                
                imageIcon.revalidate();
                imageIcon.repaint();
                revalidate();
                repaint();
            }
            else if(response == 3) { //price
                while(true) {
                    try {
                        item.setPrice(Double.parseDouble(JOptionPane.showInputDialog(null, "Please type the new price of the item:", "new", JOptionPane.INFORMATION_MESSAGE).trim()));
                        priceText.setText("" + item.getPrice());
                        //only gets here if the string can be parsed as a double
                        
                        try(Connection conn = DriverManager.getConnection(Information.getUrlSQL(), Information.getUsernameSQL(), Information.getPasswordSQL())) {
                            Statement statement = conn.createStatement();
                            statement.executeUpdate("UPDATE `foods`.`products` SET `price` = '" + item.getPrice() + "' WHERE (`food_id` = '" + sqlIndex + "');");
                        } catch(Exception ex) {System.out.println(ex);}
                        
                        break;
                    } catch(NumberFormatException e) {}
                }
            }
         } else {
            JOptionPane.showMessageDialog(null, "Please select an item first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        UIManager.put("OptionPane.yesButtonText", "Yes");
        UIManager.put("OptionPane.noButtonText", "No");
        if(listSpecialtyPizzas.getSelectedValue() != null) {
            int input = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this item?", "delete", JOptionPane.YES_NO_OPTION, 3);
            // 0 = yes, 1 = no
            if(input == 0) {
                descriptionTxtArea.setText("");
                priceText.setText("");
                imageIcon.setIcon(null);
                listModel.removeAllElements();
                
            int index = -1;
            switch (specialtyPizzasTxt.getText()) {
                case "All Items" -> {
                    Food item = accountsAndOrders.getAllFoods().get(listSpecialtyPizzas.getSelectedIndex());
                    System.out.println(accountsAndOrders.getAllFoods().get(listSpecialtyPizzas.getSelectedIndex()).getType());
                    switch(item.getType()) {
                        case "Specialty Pizza" -> accountsAndOrders.getSpPizzas().remove(accountsAndOrders.findFoodIndexInArraylist(accountsAndOrders.getSpPizzas(), item));
                        case "Cold Drink" -> accountsAndOrders.getColdDrinks().remove(accountsAndOrders.findFoodIndexInArraylist(accountsAndOrders.getColdDrinks(), item));
                        case "Hot Drink" -> accountsAndOrders.getHotDrinks().remove(accountsAndOrders.findFoodIndexInArraylist(accountsAndOrders.getHotDrinks(), item));
                        case "Shake" -> accountsAndOrders.getShakes().remove(accountsAndOrders.findFoodIndexInArraylist(accountsAndOrders.getShakes(), item));
                        case "Ice Cream" -> accountsAndOrders.getIceCream().remove(accountsAndOrders.findFoodIndexInArraylist(accountsAndOrders.getIceCream(), item));
                        case "Cookie" -> accountsAndOrders.getCookies().remove(accountsAndOrders.findFoodIndexInArraylist(accountsAndOrders.getCookies(), item));
                        case "Specialty Salad" -> accountsAndOrders.getSpSalads().remove(accountsAndOrders.findFoodIndexInArraylist(accountsAndOrders.getSpSalads(), item));
                        case "Sauce" -> accountsAndOrders.getSauces().remove(accountsAndOrders.findFoodIndexInArraylist(accountsAndOrders.getSauces(), item));
                    }
                    accountsAndOrders.getAllFoods().remove(listSpecialtyPizzas.getSelectedIndex());
                    
                    index = item.getSQLIndex();
                }
                case "Specialty Pizzas" -> index = accountsAndOrders.getSpPizzas().remove(listSpecialtyPizzas.getSelectedIndex()).getSQLIndex();
                case "Cold Drinks" -> index = accountsAndOrders.getColdDrinks().remove(listSpecialtyPizzas.getSelectedIndex()).getSQLIndex();
                case "Hot Drinks" -> index = accountsAndOrders.getHotDrinks().remove(listSpecialtyPizzas.getSelectedIndex()).getSQLIndex();
                case "Shakes" -> index = accountsAndOrders.getShakes().remove(listSpecialtyPizzas.getSelectedIndex()).getSQLIndex();
                case "Ice Creams" -> index = accountsAndOrders.getIceCream().remove(listSpecialtyPizzas.getSelectedIndex()).getSQLIndex();
                case "Cookies" -> index = accountsAndOrders.getCookies().remove(listSpecialtyPizzas.getSelectedIndex()).getSQLIndex();
                case "Specialty Salads" -> index = accountsAndOrders.getSpSalads().remove(listSpecialtyPizzas.getSelectedIndex()).getSQLIndex();
                case "Sauces" -> index = accountsAndOrders.getSauces().remove(listSpecialtyPizzas.getSelectedIndex()).getSQLIndex();
            }
                try(Connection conn = DriverManager.getConnection(Information.getUrlSQL(), Information.getUsernameSQL(), Information.getPasswordSQL())) {
                    Statement statement = conn.createStatement();
                    statement.executeUpdate("DELETE FROM `foods`.`products` WHERE (`food_id` = '" + index + "');");
                    //totalItemsCount--; THIS WILL NOT happen - sql indexes dont have to be completely counting order
                } catch(Exception ex) {System.out.println(ex);}
            
                jScrollPane.repaint(); //refreshes the scroll pane the rewards list is on    
                jScrollPane1.repaint();
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnReturnbtnEditUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnbtnEditUsernameActionPerformed

        descriptionTxtArea.setText("");
        priceText.setText("");
        imageIcon.setIcon(null);
        listModel.removeAllElements();
        selectSortBy.setSelectedItem("Sort by...");

        jLayeredPane.removeAll();
        jLayeredPane.add(jPanel);
        jLayeredPane.revalidate();
        jLayeredPane.repaint();
    }//GEN-LAST:event_btnReturnbtnEditUsernameActionPerformed

    private void btnPizzasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPizzasActionPerformed
  
        specialtyPizzasTxt.setText("Specialty Pizzas");
        
        listSpecialtyPizzas.setModel(new javax.swing.AbstractListModel<String>() {
        public int getSize() { return accountsAndOrders.getSpPizzas().size(); }
        public String getElementAt(int i) { return accountsAndOrders.getSpPizzas().get(i).getName(); }
        });
        goToJpanel1();
    }//GEN-LAST:event_btnPizzasActionPerformed

    private void listSpecialtyPizzasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listSpecialtyPizzasMouseClicked
        if(listSpecialtyPizzas.getSelectedValue() != null) {
            
            Food item = null;
            
            switch (specialtyPizzasTxt.getText()) {
                case "All Items" -> item = accountsAndOrders.getAllFoods().get(listSpecialtyPizzas.getSelectedIndex());
                case "Specialty Pizzas" -> item = accountsAndOrders.getSpPizzas().get(listSpecialtyPizzas.getSelectedIndex());
                case "Cold Drinks" -> item = accountsAndOrders.getColdDrinks().get(listSpecialtyPizzas.getSelectedIndex());
                case "Hot Drinks" -> item = accountsAndOrders.getHotDrinks().get(listSpecialtyPizzas.getSelectedIndex());
                case "Shakes" -> item = accountsAndOrders.getShakes().get(listSpecialtyPizzas.getSelectedIndex());
                case "Ice Creams" -> item = accountsAndOrders.getIceCream().get(listSpecialtyPizzas.getSelectedIndex());
                case "Cookies" -> item = accountsAndOrders.getCookies().get(listSpecialtyPizzas.getSelectedIndex());
                case "Specialty Salads" -> item = accountsAndOrders.getSpSalads().get(listSpecialtyPizzas.getSelectedIndex());
                case "Sauces" -> item = accountsAndOrders.getSauces().get(listSpecialtyPizzas.getSelectedIndex());
            }
            
            descriptionTxtArea.setText(item.getDescription());
            
            imageIcon.setIcon(new javax.swing.ImageIcon(item.getImageDirectory()));
            imageIcon.revalidate();
            imageIcon.repaint();
            
            listModel.removeAllElements();
            for(int i = 0; i < item.getIngredients().size(); i++) {
                listModel.addElement(item.getIngredients().get(i));
            }
            
            jScrollPane1.revalidate();
            jScrollPane1.repaint();
            
            priceText.setText("" + item.getPrice());  
        }
    }//GEN-LAST:event_listSpecialtyPizzasMouseClicked

    private void btnAddSpPizzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSpPizzaActionPerformed
        jLayeredPane.removeAll();
        jLayeredPane.add(jPanel3);
        jLayeredPane.revalidate();
        jLayeredPane.repaint();
    }//GEN-LAST:event_btnAddSpPizzaActionPerformed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        try {
            double price = Double.parseDouble(priceTxt.getText());
            
            //will only get here if price can be parsed to double
            Food item = new Food(nameTxt.getText(), descriptionTxt.getText(), imageDirectoryTxt.getText(), price, (String) selectFoodItem.getSelectedItem());
            totalItemsCount++;
            item.setSQLIndex(totalItemsCount);
            
            switch ((String) selectFoodItem.getSelectedItem()) {
                case "Specialty Pizza" -> accountsAndOrders.getSpPizzas().add(item);
                case "Cold Drink" -> accountsAndOrders.getColdDrinks().add(item);
                case "Hot Drink" -> accountsAndOrders.getHotDrinks().add(item);
                case "Shake" -> accountsAndOrders.getShakes().add(item);
                case "Ice Cream" -> accountsAndOrders.getIceCream().add(item);
                case "Cookie" -> accountsAndOrders.getCookies().add(item);
                case "Specialty Salad" -> accountsAndOrders.getSpSalads().add(item);
                case "Sauce" -> accountsAndOrders.getSauces().add(item);
            }
            
            //asks for ingredients
            ArrayList<String> ingredients = new ArrayList<>();
            String ingredientsList = "";
            while(true) {
                String ingredient = JOptionPane.showInputDialog(null, "Type in the ingredient (cancel to quit)", "set ingredients", JOptionPane.INFORMATION_MESSAGE);
                if(ingredient != null) {
                    ingredients.add(ingredient);
                    ingredientsList += (ingredient + ", ");
                }
                else {
                    ingredientsList = ingredientsList.replaceAll(", $", "");
                    break;
                }
            }
            
            item.setIngredients(ingredients);
            
            try (Connection conn = DriverManager.getConnection(Information.getUrlSQL(), Information.getUsernameSQL(), Information.getPasswordSQL())) {
                Statement statement = conn.createStatement();
                statement.executeUpdate("INSERT INTO `foods`.`products` (`food_id`, `name`, `description`, `imageDirectory`, `price`, `type`, `ingredients`) VALUES ('" + totalItemsCount + "', '" + nameTxt.getText() + "', '" + descriptionTxt.getText() + "', '" + imageDirectoryTxt.getText() + "', '" + price + "', '" + (String) selectFoodItem.getSelectedItem() + "', '" + ingredientsList + "');");
            } catch (Exception ex) {
                System.out.println(ex);
            }
            
            jLayeredPane.removeAll();
            jLayeredPane.add(jPanel);
            jLayeredPane.revalidate();
            jLayeredPane.repaint();
            listSpecialtyPizzas.revalidate();
            listSpecialtyPizzas.repaint();
            
        } catch (NumberFormatException e) {
            errorTxt.setText("Make sure the price is a decimal. Please try again.");
        }
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnReturn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturn1ActionPerformed
        nameTxt.setText("Type here...");
        imageDirectoryTxt.setText("...");
        priceTxt.setText("...");
        selectFoodItem.setSelectedItem("Select Item...");
        descriptionTxt.setText("");
        
        jLayeredPane.removeAll();
        jLayeredPane.add(jPanel);
        jLayeredPane.revalidate();
        jLayeredPane.repaint();
    }//GEN-LAST:event_btnReturn1ActionPerformed

    public void goToJpanel1() {
        jLayeredPane.removeAll();
        jLayeredPane.add(jPanel1);
        
        jLayeredPane.revalidate();
        jLayeredPane.repaint();
    }
    
    private void selectSortByActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectSortByActionPerformed
        ArrayList<Food> list = null;
        
        switch (specialtyPizzasTxt.getText()) {
                case "All Items" -> list = accountsAndOrders.getAllFoods();
                case "Specialty Pizzas" -> list = accountsAndOrders.getSpPizzas();
                case "Cold Drinks" -> list = accountsAndOrders.getColdDrinks();
                case "Hot Drinks" -> list = accountsAndOrders.getHotDrinks();
                case "Shakes" -> list = accountsAndOrders.getShakes();
                case "Ice Creams" -> list = accountsAndOrders.getIceCream();
                case "Cookies" -> list = accountsAndOrders.getCookies();
                case "Specialty Salads" -> list = accountsAndOrders.getSpSalads();
                case "Sauces" -> list = accountsAndOrders.getSauces();
            }
        
        if(selectSortBy.getSelectedItem().equals("Alphabetical")) {
            for (int j = 0; j < list.size() - 1; j++) {
                int min = j;
                for (int k = j + 1; k < list.size(); k++) {
                    if (list.get(k).getName().compareTo(list.get(min).getName()) < 0) {
                        min = k;
                    }
                }

                // Swap the reference at j with the reference at min
                Food temp = list.get(j);
                list.set(j, list.get(min));
                list.set(min, temp);
                jScrollPane.repaint();
            }
        } else if(selectSortBy.getSelectedItem().equals("Zetabetical")) {
            for (int j = 0; j < list.size() - 1; j++) {
                int min = j;
                for (int k = j + 1; k < list.size(); k++) {
                    if (list.get(k).getName().compareTo(list.get(min).getName()) > 0) { //changing < to > cuz that lil change changes game
                        min = k;
                    }
                }

                // Swap the reference at j with the reference at min
                Food temp = list.get(j);
                list.set(j, list.get(min));
                list.set(min, temp);
                jScrollPane.repaint();
            }
        }
    }//GEN-LAST:event_selectSortByActionPerformed

    private void btnDrinksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDrinksActionPerformed
        String[] options = new String[] {"Cold Drinks", "Hot Drinks", "Cancel"};
        int  input = JOptionPane.showOptionDialog(null, "Please press your desired category:", "Select an Option...", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, icon, options, options[0]);
        if(input == 0) { //Cold Drinks
            specialtyPizzasTxt.setText("Cold Drinks");
            listSpecialtyPizzas.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() { return accountsAndOrders.getColdDrinks().size(); }
            public String getElementAt(int i) { return accountsAndOrders.getColdDrinks().get(i).getName(); }
            });
            goToJpanel1();
        } else if(input == 1) {//Hot Drinks
            specialtyPizzasTxt.setText("Hot Drinks");
            listSpecialtyPizzas.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() { return accountsAndOrders.getHotDrinks().size(); }
            public String getElementAt(int i) { return accountsAndOrders.getHotDrinks().get(i).getName(); }
            });
            goToJpanel1();
        }
    }//GEN-LAST:event_btnDrinksActionPerformed

    private void btnSaladsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaladsActionPerformed
        specialtyPizzasTxt.setText("Specialty Salads");
        listSpecialtyPizzas.setModel(new javax.swing.AbstractListModel<String>() {
        public int getSize() { return accountsAndOrders.getSpSalads().size(); }
        public String getElementAt(int i) { return accountsAndOrders.getSpSalads().get(i).getName(); }
        });
        goToJpanel1();
    }//GEN-LAST:event_btnSaladsActionPerformed

    private void btnSaucesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaucesActionPerformed
        specialtyPizzasTxt.setText("Sauces");
        listSpecialtyPizzas.setModel(new javax.swing.AbstractListModel<String>() {
        public int getSize() { return accountsAndOrders.getSauces().size(); }
        public String getElementAt(int i) { return accountsAndOrders.getSauces().get(i).getName(); }
        });
        goToJpanel1();
    }//GEN-LAST:event_btnSaucesActionPerformed

    private void btnDessertsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDessertsActionPerformed
        String[] options = new String[] {"Shakes", "Ice Cream", "Cookies", "Cancel"};
        int  input = JOptionPane.showOptionDialog(null, "Please press your desired category:", "Select an Option...", JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, icon, options, options[0]);
        if(input == 0) { //shakes
            specialtyPizzasTxt.setText("Shakes");
            listSpecialtyPizzas.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() { return accountsAndOrders.getShakes().size(); }
            public String getElementAt(int i) { return accountsAndOrders.getShakes().get(i).getName(); }
            });
            goToJpanel1();
            
        } else if(input == 1) {//ice cream
            specialtyPizzasTxt.setText("Ice Creams");
            listSpecialtyPizzas.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() { return accountsAndOrders.getIceCream().size(); }
            public String getElementAt(int i) { return accountsAndOrders.getIceCream().get(i).getName(); }
            });
            goToJpanel1();
        } else if(input == 2) {//cookies
            specialtyPizzasTxt.setText("Cookies");
            listSpecialtyPizzas.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() { return accountsAndOrders.getCookies().size(); }
            public String getElementAt(int i) { return accountsAndOrders.getCookies().get(i).getName(); }
            });
            goToJpanel1();
        }
    }//GEN-LAST:event_btnDessertsActionPerformed

    private void btnSeeAllItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeeAllItemsActionPerformed
        accountsAndOrders.getAllFoods().clear();
        
        //adding all food items to the arraylist
        accountsAndOrders.getAllFoods().addAll(accountsAndOrders.getSpPizzas());
        accountsAndOrders.getAllFoods().addAll(accountsAndOrders.getHotDrinks());
        accountsAndOrders.getAllFoods().addAll(accountsAndOrders.getColdDrinks());
        accountsAndOrders.getAllFoods().addAll(accountsAndOrders.getShakes());
        accountsAndOrders.getAllFoods().addAll(accountsAndOrders.getIceCream());
        accountsAndOrders.getAllFoods().addAll(accountsAndOrders.getCookies());
        accountsAndOrders.getAllFoods().addAll(accountsAndOrders.getSpSalads());
        accountsAndOrders.getAllFoods().addAll(accountsAndOrders.getSauces());
        
        specialtyPizzasTxt.setText("All Items");
        listSpecialtyPizzas.setModel(new javax.swing.AbstractListModel<String>() {
        public int getSize() { return accountsAndOrders.getAllFoods().size(); }
        public String getElementAt(int i) { return accountsAndOrders.getAllFoods().get(i).getName(); }
        });
        goToJpanel1();
    }//GEN-LAST:event_btnSeeAllItemsActionPerformed

    private void specialtyPizzasTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_specialtyPizzasTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_specialtyPizzasTxtActionPerformed

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed
        btnAddSpPizzaActionPerformed(evt);
    }//GEN-LAST:event_btnAddItemActionPerformed

    private void btnAddToOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToOrderActionPerformed
        String value = listSpecialtyPizzas.getSelectedValue();
        if(value != null && !priceText.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Successfully added item to order.", "Success", JOptionPane.INFORMATION_MESSAGE);
            
            accountsAndOrders.getCurrentOrder().add(value);
            accountsAndOrders.getCurrentPrices().add(Double.parseDouble(priceText.getText()));
        } else {
            JOptionPane.showMessageDialog(null, "Please select an item to add first.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddToOrderActionPerformed

    private void btnReturn2btnEditUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturn2btnEditUsernameActionPerformed
        ordersTab oTab = new ordersTab();
        oTab.setVisible(true);
        dispose();
    }//GEN-LAST:event_btnReturn2btnEditUsernameActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu File;
    private javax.swing.JMenu Help;
    private javax.swing.JMenu Home;
    private javax.swing.JMenuBar Menu;
    private javax.swing.JTextField MenuTxt;
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnAddSpPizza;
    private javax.swing.JButton btnAddToOrder;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDesserts;
    private javax.swing.JButton btnDrinks;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPizzas;
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton btnReturn1;
    private javax.swing.JButton btnReturn2;
    private javax.swing.JButton btnSalads;
    private javax.swing.JButton btnSauces;
    private javax.swing.JButton btnSeeAllItems;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextArea descriptionTxt;
    private javax.swing.JTextArea descriptionTxtArea;
    private javax.swing.JTextField errorTxt;
    private javax.swing.JTextField imageDirectoryTxt;
    private javax.swing.JLabel imageIcon;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLayeredPane jLayeredPane;
    private javax.swing.JPanel jPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblIngredients;
    private javax.swing.JList<String> listIngredients;
    private javax.swing.JList<String> listSpecialtyPizzas;
    private javax.swing.JMenuItem menuLogOut;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTxt;
    private javax.swing.JTextField newItemTxt;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JLabel priceLabel1;
    private javax.swing.JTextField priceText;
    private javax.swing.JTextField priceTxt;
    private javax.swing.JComboBox<String> selectFoodItem;
    private javax.swing.JComboBox<String> selectSortBy;
    private javax.swing.JTextField specialtyPizzasTxt;
    // End of variables declaration//GEN-END:variables
    private DefaultListModel<String> listModel;
}
